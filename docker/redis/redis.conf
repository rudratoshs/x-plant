# ðŸ“„ File: docker/redis/redis.conf
#
# ðŸ§­ Purpose (Layman Explanation):
# Configuration file that tells Redis (our app's memory cache) how to behave,
# like setting up the rules for how our app stores and retrieves fast data.
#
# ðŸ§ª Purpose (Technical Summary):
# Redis server configuration for development environment with optimized settings
# for caching, session storage, and Celery message broker functionality.
#
# ðŸ”— Dependencies:
# - Redis server (cache and message broker)
# - docker-compose.yml (volume mount configuration)
# - app/shared/config/settings.py (Redis connection settings)
#
# ðŸ”„ Connected Modules / Calls From:
# - Docker Redis container (configuration loading)
# - Application cache layer (connection and operations)
# - Celery workers (message broker operations)
# - Session management (user session storage)

# Redis Configuration for Plant Care Application
# Optimized for development environment with Celery and caching

# =============================================================================
# BASIC CONFIGURATION
# =============================================================================

# Accept connections from any IP (safe in Docker network)
bind 0.0.0.0

# Default Redis port
port 6379

# Set Redis to run in the foreground (required for Docker)
daemonize no

# Process ID file
pidfile /var/run/redis_6379.pid

# =============================================================================
# LOGGING
# =============================================================================

# Log level: debug, verbose, notice, warning
loglevel notice

# Log to stdout for Docker container logging
logfile ""

# =============================================================================
# MEMORY MANAGEMENT
# =============================================================================

# Maximum memory usage (512MB for development)
maxmemory 512mb

# Memory eviction policy when max memory reached
# allkeys-lru: Evict any key according to LRU algorithm
maxmemory-policy allkeys-lru

# =============================================================================
# PERSISTENCE
# =============================================================================

# Save the DB on disk if at least 1 key changed in 900 seconds (15 minutes)
save 900 1

# Save the DB if at least 10 keys changed in 300 seconds (5 minutes) 
save 300 10

# Save the DB if at least 10000 keys changed in 60 seconds (1 minute)
save 60 10000

# Compress string objects using LZF when dump .rdb databases
rdbcompression yes

# Checksum the RDB file
rdbchecksum yes

# The filename where to dump the DB
dbfilename dump.rdb

# Working directory for DB file
dir /data

# =============================================================================
# SECURITY
# =============================================================================

# Disable protected mode (safe in Docker network)
protected-mode no

# No password required (development only)
# requirepass your-redis-password-here

# =============================================================================
# NETWORK & PERFORMANCE
# =============================================================================

# TCP listen backlog
tcp-backlog 511

# Close connection after client is idle for N seconds (0 to disable)
timeout 0

# TCP keepalive
tcp-keepalive 300

# =============================================================================
# CLIENT CONFIGURATION
# =============================================================================

# Maximum number of connected clients
maxclients 10000

# =============================================================================
# SLOW LOG
# =============================================================================

# Log queries slower than 10000 microseconds (10 milliseconds)
slowlog-log-slower-than 10000

# Maximum length of slow log
slowlog-max-len 128

# =============================================================================
# LATENCY MONITOR
# =============================================================================

# Enable latency monitoring
latency-monitor-threshold 100

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Hash table size for databases
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# List compression
list-max-ziplist-size -2
list-compress-depth 0

# Set compression
set-max-intset-entries 512

# Sorted set compression  
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation
hll-sparse-max-bytes 3000

# Streams configuration
stream-node-max-bytes 4096
stream-node-max-entries 100

# Active rehashing
activerehashing yes

# Client output buffer limits
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Client query buffer limit
client-query-buffer-limit 1gb

# Protocol buffer limit
proto-max-bulk-len 512mb

# =============================================================================
# CELERY OPTIMIZATIONS
# =============================================================================

# Increase timeout for Celery workers
timeout 0

# Enable keyspace notifications for Celery task monitoring
notify-keyspace-events Ex

# =============================================================================
# DEVELOPMENT OPTIMIZATIONS
# =============================================================================

# Disable disk writes during BGSAVE/BGREWRITEAOF errors
stop-writes-on-bgsave-error no

# Enable RDB-AOF hybrid persistence for faster restarts
aof-use-rdb-preamble yes